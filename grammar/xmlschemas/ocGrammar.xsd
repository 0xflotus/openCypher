<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://opencypher.org/grammar"
	xmlns="http://opencypher.org/grammar"
	xmlns:rr="http://opencypher.org/railroad"
	xmlns:oc="http://opencypher.org/opencypher"
	xmlns:scope="http://opencypher.org/scope"
	xmlns:ast="http://opencypher.org/syntaxtree"
	elementFormDefault="qualified">

	<!-- the separately defined attributes are in different namespaces so have 
		to be in their own xsd files -->
	<xsd:import namespace="http://opencypher.org/railroad"
		schemaLocation="ocRailRoad.xsd" />

	<xsd:import namespace="http://opencypher.org/opencypher"
		schemaLocation="ocLegacy.xsd" />

	<xsd:import namespace="http://opencypher.org/scope"
		schemaLocation="ocScope.xsd" />

	<xsd:import namespace="http://opencypher.org/syntaxtree"
		schemaLocation="ocSyntaxTree.xsd" />

	<!-- the global element -->
	<xsd:element name="grammar" type="Grammar"></xsd:element>

	<!--  the types -->
	<xsd:complexType name="Grammar">
		<xsd:sequence>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element name="vocabulary" type="Vocabulary" />
				<xsd:element name="production" type="Production" />
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="language" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="Vocabulary">
		<xsd:attribute name="file" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Production is like Sequence but has an extra element at the beginning, so
		copy-and-paste rather than extend  -->
	<xsd:complexType name="Production" mixed="true">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string"
				minOccurs="0" />
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="alt" type="Sequence"></xsd:element>
				<xsd:element name="seq" type="Sequence"></xsd:element>
				<xsd:element name="literal" type="Literal"></xsd:element>
				<xsd:element name="character" type="Character"></xsd:element>
				<xsd:element name="non-terminal" type="Non-terminal"></xsd:element>
				<xsd:element name="opt" type="Sequence"></xsd:element>
				<xsd:element name="repeat" type="Repeat"></xsd:element>
			</xsd:choice>
		</xsd:sequence>

		<xsd:attribute name="name" type="xsd:string"></xsd:attribute>
		<xsd:attribute ref="rr:inline"></xsd:attribute>
		<xsd:attribute ref="rr:skip"></xsd:attribute>
		<xsd:attribute ref="oc:legacy"></xsd:attribute>
		<xsd:attribute ref="scope:rule"></xsd:attribute>
		<xsd:attribute ref="oc:lexer"></xsd:attribute>

	</xsd:complexType>

	<xsd:complexType name="Sequence" mixed="true">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="alt" type="Sequence"></xsd:element>
				<xsd:element name="seq" type="Sequence"></xsd:element>
				<xsd:element name="literal" type="Literal"></xsd:element>
				<xsd:element name="character" type="Character"></xsd:element>
				<xsd:element name="non-terminal" type="Non-terminal"></xsd:element>
				<xsd:element name="opt" type="Sequence"></xsd:element>
				<xsd:element name="repeat" type="Repeat"></xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="Repeat">
		<xsd:complexContent>
			<xsd:extension base="Sequence">
				<xsd:attribute name="min" type="xsd:int" default="0"></xsd:attribute>
				<xsd:attribute name="max" type="xsd:int"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="Non-terminal">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
		<xsd:attribute ref="rr:title"></xsd:attribute>
		<xsd:attribute ref="ast:entry"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="Literal">
		<xsd:attribute name="case-sensitive" type="xsd:boolean"
			default="true"></xsd:attribute>
		<xsd:attribute name="value" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="Character">
		<xsd:sequence>
			<xsd:element name="except" type="Except"
				maxOccurs="unbounded" minOccurs="0"></xsd:element>
		</xsd:sequence>
		<xsd:attribute name="set" type="xsd:string"></xsd:attribute>
	</xsd:complexType>


	<xsd:complexType name="Except">
		<xsd:attribute name="literal" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="codePoint" type="xsd:int"></xsd:attribute>
		<xsd:attribute name="set" type="xsd:string"></xsd:attribute>
	</xsd:complexType>




</xsd:schema>